.TH "REDIST/SRC/pdtrmr.c" 3 "Sat Nov 16 2019" "Version 2.1" "ScaLAPACK 2.1" \" -*- nroff -*-
.ad l
.nh
.SH NAME
REDIST/SRC/pdtrmr.c
.SH SYNOPSIS
.br
.PP
\fC#include 'redist\&.h'\fP
.br
\fC#include <stdio\&.h>\fP
.br
\fC#include <stdlib\&.h>\fP
.br
\fC#include <assert\&.h>\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBMDESC\fP"
.br
.ti -1c
.RI "struct \fBIDESC\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBstatic2\fP   static"
.br
.ti -1c
.RI "#define \fBfortran_mr2d\fP   pdtrmr2do"
.br
.ti -1c
.RI "#define \fBfortran_mr2dnew\fP   pdtrmr2d"
.br
.ti -1c
.RI "#define \fBdcopy_\fP   dcopy"
.br
.ti -1c
.RI "#define \fBdlacpy_\fP   dlacpy"
.br
.ti -1c
.RI "#define \fBClacpy\fP   Cdtrlacpy"
.br
.ti -1c
.RI "#define \fBBLOCK_CYCLIC_2D\fP   1"
.br
.ti -1c
.RI "#define \fBSHIFT\fP(row,  sprow,  nbrow)   ((row)\-(sprow)+ ((row) >= (sprow) ? 0 : (nbrow)))"
.br
.ti -1c
.RI "#define \fBmax\fP(A,  B)   ((A)>(B)?(A):(B))"
.br
.ti -1c
.RI "#define \fBmin\fP(A,  B)   ((A)>(B)?(B):(A))"
.br
.ti -1c
.RI "#define \fBDIVUP\fP(a,  b)   ( ((a)\-1) /(b)+1)"
.br
.ti -1c
.RI "#define \fBROUNDUP\fP(a,  b)   (\fBDIVUP\fP(a,b)*(b))"
.br
.ti -1c
.RI "#define \fBscanD0\fP   dtrscanD0"
.br
.ti -1c
.RI "#define \fBdispmat\fP   dtrdispmat"
.br
.ti -1c
.RI "#define \fBsetmemory\fP   dtrsetmemory"
.br
.ti -1c
.RI "#define \fBfreememory\fP   dtrfreememory"
.br
.ti -1c
.RI "#define \fBscan_intervals\fP   dtrscan_intervals"
.br
.ti -1c
.RI "#define \fBSENDBUFF\fP   0"
.br
.ti -1c
.RI "#define \fBRECVBUFF\fP   1"
.br
.ti -1c
.RI "#define \fBSIZEBUFF\fP   2"
.br
.ti -1c
.RI "#define \fBNDEBUG\fP"
.br
.ti -1c
.RI "#define \fBDESCLEN\fP   9"
.br
.ti -1c
.RI "#define \fBNBPARAM\fP"
.br
.ti -1c
.RI "#define \fBMAGIC_MAX\fP   100000000"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBClacpy\fP ()"
.br
.ti -1c
.RI "void \fBCblacs_pcoord\fP ()"
.br
.ti -1c
.RI "int \fBCblacs_pnum\fP ()"
.br
.ti -1c
.RI "void \fBCsetpvmtids\fP ()"
.br
.ti -1c
.RI "void \fBCblacs_get\fP ()"
.br
.ti -1c
.RI "void \fBCblacs_pinfo\fP ()"
.br
.ti -1c
.RI "void \fBCblacs_gridinfo\fP ()"
.br
.ti -1c
.RI "void \fBCblacs_gridinit\fP ()"
.br
.ti -1c
.RI "void \fBCblacs_exit\fP ()"
.br
.ti -1c
.RI "void \fBCblacs_gridexit\fP ()"
.br
.ti -1c
.RI "void \fBCblacs_setup\fP ()"
.br
.ti -1c
.RI "void \fBCigebs2d\fP ()"
.br
.ti -1c
.RI "void \fBCigebr2d\fP ()"
.br
.ti -1c
.RI "void \fBCigesd2d\fP ()"
.br
.ti -1c
.RI "void \fBCigerv2d\fP ()"
.br
.ti -1c
.RI "void \fBCigsum2d\fP ()"
.br
.ti -1c
.RI "void \fBCigamn2d\fP ()"
.br
.ti -1c
.RI "void \fBCigamx2d\fP ()"
.br
.ti -1c
.RI "void \fBCdgesd2d\fP ()"
.br
.ti -1c
.RI "void \fBCdgerv2d\fP ()"
.br
.ti -1c
.RI "void \fBdlacpy_\fP ()"
.br
.ti -1c
.RI "int \fBlocalindice\fP ()"
.br
.ti -1c
.RI "void * \fBmr2d_malloc\fP ()"
.br
.ti -1c
.RI "int \fBppcm\fP ()"
.br
.ti -1c
.RI "int \fBlocalsize\fP ()"
.br
.ti -1c
.RI "int \fBmemoryblocksize\fP ()"
.br
.ti -1c
.RI "int \fBchangeorigin\fP ()"
.br
.ti -1c
.RI "void \fBparamcheck\fP ()"
.br
.ti -1c
.RI "void \fBscanD0\fP ()"
.br
.ti -1c
.RI "void \fBdispmat\fP ()"
.br
.ti -1c
.RI "void \fBsetmemory\fP ()"
.br
.ti -1c
.RI "void \fBfreememory\fP ()"
.br
.ti -1c
.RI "int \fBscan_intervals\fP ()"
.br
.ti -1c
.RI "void \fBCpdtrmr2do\fP ()"
.br
.ti -1c
.RI "void \fBCpdtrmr2d\fP ()"
.br
.ti -1c
.RI "void \fBfortran_mr2d\fP (char *uplo, char *diag, int *m, int *n, double *A, int *ia, int *ja, desc_A, double *B, int *ib, int *jb, desc_B)"
.br
.ti -1c
.RI "void \fBfortran_mr2dnew\fP (char *uplo, char *diag, int *m, int *n, double *A, int *ia, int *ja, desc_A, double *B, int *ib, int *jb, desc_B, int *gcontext)"
.br
.ti -1c
.RI "\fBstatic2\fP void \fBinit_chenille\fP ()"
.br
.ti -1c
.RI "\fBstatic2\fP int \fBinter_len\fP ()"
.br
.ti -1c
.RI "\fBstatic2\fP int \fBblock2buff\fP ()"
.br
.ti -1c
.RI "\fBstatic2\fP void \fBbuff2block\fP ()"
.br
.ti -1c
.RI "\fBstatic2\fP void \fBgridreshape\fP ()"
.br
.ti -1c
.RI "void \fBCpdtrmr2do\fP (char *uplo, char *diag, int m, int n, double *ptrmyblock, int ia, int ja, \fBMDESC\fP *ma, double *ptrmynewblock, int ib, int jb, \fBMDESC\fP *mb)"
.br
.ti -1c
.RI "void \fBCpdtrmr2d\fP (char *uplo, char *diag, int m, int n, double *ptrmyblock, int ia, int ja, \fBMDESC\fP *ma, double *ptrmynewblock, int ib, int jb, \fBMDESC\fP *mb, int globcontext)"
.br
.ti -1c
.RI "\fBstatic2\fP void \fBinit_chenille\fP (int mypnum, int nprocs, int n0, int *proc0, int n1, int *proc1, int **psend, int **precv, int *myrang)"
.br
.ti -1c
.RI "void \fBClacpy\fP (int m, int n, double *a, int lda, double *b, int ldb)"
.br
.ti -1c
.RI "\fBstatic2\fP void \fBgridreshape\fP (int *ctxtp)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define BLOCK_CYCLIC_2D   1"

.PP
Definition at line 186 of file pdtrmr\&.c\&.
.SS "#define Clacpy   Cdtrlacpy"

.PP
Definition at line 173 of file pdtrmr\&.c\&.
.SS "#define dcopy_   dcopy"

.PP
Definition at line 170 of file pdtrmr\&.c\&.
.SS "#define DESCLEN   9"

.PP
Definition at line 257 of file pdtrmr\&.c\&.
.SS "#define dispmat   dtrdispmat"

.PP
Definition at line 233 of file pdtrmr\&.c\&.
.SS "#define DIVUP(a, b)   ( ((a)\-1) /(b)+1)"

.PP
Definition at line 194 of file pdtrmr\&.c\&.
.SS "#define dlacpy_   dlacpy"

.PP
Definition at line 171 of file pdtrmr\&.c\&.
.SS "#define fortran_mr2d   pdtrmr2do"

.PP
Definition at line 168 of file pdtrmr\&.c\&.
.SS "#define fortran_mr2dnew   pdtrmr2d"

.PP
Definition at line 169 of file pdtrmr\&.c\&.
.SS "#define freememory   dtrfreememory"

.PP
Definition at line 235 of file pdtrmr\&.c\&.
.SS "#define MAGIC_MAX   100000000"

.PP
Definition at line 312 of file pdtrmr\&.c\&.
.SS "#define max(A, B)   ((A)>(B)?(A):(B))"

.PP
Definition at line 192 of file pdtrmr\&.c\&.
.SS "#define min(A, B)   ((A)>(B)?(B):(A))"

.PP
Definition at line 193 of file pdtrmr\&.c\&.
.SS "#define NBPARAM"
\fBValue:\fP
.PP
.nf
20  /* p0,q0,p1,q1, puis ma,na,mba,nba,rowa,cola puis
             * idem B puis ia,ja puis ib,jb */
.fi
.PP
Definition at line 310 of file pdtrmr\&.c\&.
.SS "#define NDEBUG"

.PP
Definition at line 252 of file pdtrmr\&.c\&.
.SS "#define RECVBUFF   1"

.PP
Definition at line 246 of file pdtrmr\&.c\&.
.SS "#define ROUNDUP(a, b)   (\fBDIVUP\fP(a,b)*(b))"

.PP
Definition at line 195 of file pdtrmr\&.c\&.
.SS "#define scan_intervals   dtrscan_intervals"

.PP
Definition at line 236 of file pdtrmr\&.c\&.
.SS "#define scanD0   dtrscanD0"

.PP
Definition at line 232 of file pdtrmr\&.c\&.
.SS "#define SENDBUFF   0"

.PP
Definition at line 245 of file pdtrmr\&.c\&.
.SS "#define setmemory   dtrsetmemory"

.PP
Definition at line 234 of file pdtrmr\&.c\&.
.SS "#define SHIFT(row, sprow, nbrow)   ((row)\-(sprow)+ ((row) >= (sprow) ? 0 : (nbrow)))"

.PP
Definition at line 191 of file pdtrmr\&.c\&.
.SS "#define SIZEBUFF   2"

.PP
Definition at line 247 of file pdtrmr\&.c\&.
.SS "#define static2   static"

.SS "$Id: pdtrmr\&.c,v 1\&.1\&.1\&.1 2000/02/15 18:04:09 susan Exp $"
-- ScaLAPACK routine (version 1\&.7) -- Oak Ridge National Laboratory, Univ\&. of Tennessee, and Univ\&. of California, Berkeley\&. October 31, 1994\&.
.PP
SUBROUTINE PDTRMR2D(UPLO, DIAG, M, N, $ A, IA, JA, ADESC, $ B, IB, JB, BDESC, 
.SS "$                     CTXT)"
.SH "Purpose"
.PP
PDTRMR2D copies a submatrix of A on a submatrix of B\&. A and B can have different distributions: they can be on different processor grids, they can have different blocksizes, the beginning of the area to be copied can be at a different places on A and B\&.
.PP
The parameters can be confusing when the grids of A and B are partially or completly disjoint, in the case a processor calls this routines but is either not in the A context or B context, the ADESC[CTXT] or BDESC[CTXT] must be equal to -1, to ensure the routine recognise this situation\&. To summarize the rule:
.IP "\(bu" 2
If a processor is in A context, all parameters related to A must be valid\&.
.IP "\(bu" 2
If a processor is in B context, all parameters related to B must be valid\&.
.IP "\(bu" 2
ADESC[CTXT] and BDESC[CTXT] must be either valid contexts or equal to -1\&.
.IP "\(bu" 2
M and N must be valid for everyone\&.
.IP "\(bu" 2
other parameters are not examined\&.
.PP
.PP
The submatrix to be copied is assumed to be trapezoidal\&. So only the upper or the lower part will be copied\&. The other part is unchanged\&.
.SH "Notes"
.PP
A description vector is associated with each 2D block-cyclicly dis- tributed matrix\&. This vector stores the information required to establish the mapping between a matrix entry and its corresponding process and memory location\&.
.PP
In the following comments, the character _ should be read as 'of the distributed matrix'\&. Let A be a generic term for any 2D block cyclicly distributed matrix\&. Its description vector is DESC_A:
.PP
NOTATION STORED IN EXPLANATION
.PP
.PP
 DT_A (global) DESCA( DT_ ) The descriptor type\&. CTXT_A (global) DESCA( CTXT_ ) The BLACS context handle, indicating the BLACS process grid A is distribu- ted over\&. The context itself is glo- bal, but the handle (the integer value) may vary\&. M_A (global) DESCA( M_ ) The number of rows in the distributed matrix A\&. N_A (global) DESCA( N_ ) The number of columns in the distri- buted matrix A\&. MB_A (global) DESCA( MB_ ) The blocking factor used to distribute the rows of A\&. NB_A (global) DESCA( NB_ ) The blocking factor used to distribute the columns of A\&. RSRC_A (global) DESCA( RSRC_ ) The process row over which the first row of the matrix A is distributed\&. CSRC_A (global) DESCA( CSRC_ ) The process column over which the first column of A is distributed\&. LLD_A (local) DESCA( LLD_ ) The leading dimension of the local array storing the local blocks of the distributed matrix A\&. LLD_A >= \fBMAX(1,LOCp(M_A))\fP\&.
.SH "Important notice"
.PP
The parameters of the routine have changed in April 1996 There is a new last argument\&. It must be a context englobing all processors involved in the initial and final distribution\&.
.PP
Be aware that all processors included in this context must call the redistribution routine\&.
.SH "Parameters"
.PP
UPLO (input) CHARACTER*1\&. On entry, UPLO specifies whether we should copy the upper part of the lower part of the defined submatrix: UPLO = 'U' or 'u' copy the upper triangular part\&. UPLO = 'L' or 'l' copy the lower triangular part\&. Unchanged on exit\&.
.PP
DIAG (input) CHARACTER*1\&. On entry, DIAG specifies whether we should copy the diagonal\&. DIAG = 'U' or 'u' do NOT copy the diagonal of the submatrix\&. DIAG = 'N' or 'n' DO copy the diagonal of the submatrix\&. Unchanged on exit\&.
.PP
M (input) INTEGER\&. On entry, M specifies the number of rows of the submatrix to be copied\&. M must be at least zero\&. Unchanged on exit\&.
.PP
N (input) INTEGER\&. On entry, N specifies the number of cols of the submatrix to be redistributed\&.rows of B\&. M must be at least zero\&. Unchanged on exit\&.
.PP
A (input) DOUBLE PRECISION On entry, the source matrix\&. Unchanged on exit\&.
.PP
IA,JA (input) INTEGER On entry,the coordinates of the beginning of the submatrix of A to copy\&. 1 <= IA <= M_A - M + 1,1 <= JA <= N_A - N + 1, Unchanged on exit\&.
.PP
ADESC (input) A description vector (see Notes above) If the current processor is not part of the context of A the ADESC[CTXT] must be equal to -1\&.
.PP
B (output) DOUBLE PRECISION On entry, the destination matrix\&. The portion corresponding to the defined submatrix are updated\&.
.PP
IB,JB (input) INTEGER On entry,the coordinates of the beginning of the submatrix of B that will be updated\&. 1 <= IB <= M_B - M + 1,1 <= JB <= N_B - N + 1, Unchanged on exit\&.
.PP
BDESC (input) B description vector (see Notes above) For processors not part of the context of B BDESC[CTXT] must be equal to -1\&.
.PP
CTXT (input) a context englobing at least all processors included in either A context or B context
.SH "Memory requirement :"
.PP
for the processors belonging to grid 0, one buffer of size block 0 and for the processors belonging to grid 1, also one buffer of size block 1\&.
.PP
.PP
 Created March 1993 by B\&. Tourancheau (See sccs for modifications)\&. 
.SH "Modifications by Loic PRYLLI 1995"
.PP

.PP
Definition at line 158 of file pdtrmr\&.c\&.
.SH "Function Documentation"
.PP 
.SS "\fBstatic2\fP int block2buff ()"

.SS "\fBstatic2\fP void buff2block ()"

.SS "void Cblacs_exit ()"

.SS "void Cblacs_get ()"

.SS "void Cblacs_gridexit ()"

.SS "void Cblacs_gridinfo ()"

.SS "void Cblacs_gridinit ()"

.SS "void Cblacs_pcoord ()"

.SS "void Cblacs_pinfo ()"

.SS "int Cblacs_pnum ()"

.SS "void Cblacs_setup ()"

.SS "void Cdgerv2d ()"

.SS "void Cdgesd2d ()"

.SS "int changeorigin ()"

.SS "void Cigamn2d ()"

.SS "void Cigamx2d ()"

.SS "void Cigebr2d ()"

.SS "void Cigebs2d ()"

.SS "void Cigerv2d ()"

.SS "void Cigesd2d ()"

.SS "void Cigsum2d ()"

.SS "void Clacpy ()"

.SS "void Clacpy (int m, int n, double * a, int lda, double * b, int ldb)"

.PP
Definition at line 652 of file pdtrmr\&.c\&.
.SS "void Cpdtrmr2d ()"

.SS "void Cpdtrmr2d (char * uplo, char * diag, int m, int n, double * ptrmyblock, int ia, int ja, \fBMDESC\fP * ma, double * ptrmynewblock, int ib, int jb, \fBMDESC\fP * mb, int globcontext)"

.PP
Definition at line 314 of file pdtrmr\&.c\&.
.SS "void Cpdtrmr2do ()"

.SS "void Cpdtrmr2do (char * uplo, char * diag, int m, int n, double * ptrmyblock, int ia, int ja, \fBMDESC\fP * ma, double * ptrmynewblock, int ib, int jb, \fBMDESC\fP * mb)"

.PP
Definition at line 289 of file pdtrmr\&.c\&.
.SS "void Csetpvmtids ()"

.SS "void dispmat ()"

.SS "void dlacpy_ ()"

.SS "void fortran_mr2d (char * uplo, char * diag, int * m, int * n, double * A, int  * ia, int * ja, desc_A, double * B, int * ib, int * jb, desc_B)"

.PP
Definition at line 259 of file pdtrmr\&.c\&.
.SS "void fortran_mr2dnew (char * uplo, char * diag, int * m, int * n, double * A, int  * ia, int * ja, desc_A, double * B, int * ib, int * jb, desc_B, int  * gcontext)"

.PP
Definition at line 271 of file pdtrmr\&.c\&.
.SS "void freememory ()"

.SS "\fBstatic2\fP void gridreshape ()"

.SS "\fBstatic2\fP void gridreshape (int  * ctxtp)"

.PP
Definition at line 668 of file pdtrmr\&.c\&.
.SS "\fBstatic2\fP void init_chenille ()"

.SS "\fBstatic2\fP void init_chenille (int mypnum, int nprocs, int n0, int  * proc0, int n1, int * proc1, int ** psend, int ** precv, int * myrang)"

.PP
Definition at line 596 of file pdtrmr\&.c\&.
.SS "\fBstatic2\fP int inter_len ()"

.SS "int localindice ()"

.SS "int localsize ()"

.SS "int memoryblocksize ()"

.SS "void* mr2d_malloc ()"

.SS "void paramcheck ()"

.SS "int ppcm ()"

.SS "int scan_intervals ()"

.SS "void scanD0 ()"

.SS "void setmemory ()"

.SH "Author"
.PP 
Generated automatically by Doxygen for ScaLAPACK 2\&.1 from the source code\&.
