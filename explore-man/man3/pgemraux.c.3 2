.TH "REDIST/SRC/pgemraux.c" 3 "Sat Nov 16 2019" "Version 2.1" "ScaLAPACK 2.1" \" -*- nroff -*-
.ad l
.nh
.SH NAME
REDIST/SRC/pgemraux.c
.SH SYNOPSIS
.br
.PP
\fC#include 'redist\&.h'\fP
.br
\fC#include <stdio\&.h>\fP
.br
\fC#include <stdlib\&.h>\fP
.br
\fC#include <assert\&.h>\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBMDESC\fP"
.br
.ti -1c
.RI "struct \fBIDESC\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBstatic2\fP   static"
.br
.ti -1c
.RI "#define \fBfortran_mr2d\fP   pigemr2do"
.br
.ti -1c
.RI "#define \fBfortran_mr2dnew\fP   pigemr2d"
.br
.ti -1c
.RI "#define \fBicopy_\fP   \fBicopy\fP"
.br
.ti -1c
.RI "#define \fBilacpy_\fP   \fBilacpy\fP"
.br
.ti -1c
.RI "#define \fBClacpy\fP   Cigelacpy"
.br
.ti -1c
.RI "#define \fBBLOCK_CYCLIC_2D\fP   1"
.br
.ti -1c
.RI "#define \fBSHIFT\fP(row,  sprow,  nbrow)   ((row)\-(sprow)+ ((row) >= (sprow) ? 0 : (nbrow)))"
.br
.ti -1c
.RI "#define \fBmax\fP(A,  B)   ((A)>(B)?(A):(B))"
.br
.ti -1c
.RI "#define \fBmin\fP(A,  B)   ((A)>(B)?(B):(A))"
.br
.ti -1c
.RI "#define \fBDIVUP\fP(a,  b)   ( ((a)\-1) /(b)+1)"
.br
.ti -1c
.RI "#define \fBROUNDUP\fP(a,  b)   (\fBDIVUP\fP(a,b)*(b))"
.br
.ti -1c
.RI "#define \fBscanD0\fP   igescanD0"
.br
.ti -1c
.RI "#define \fBdispmat\fP   igedispmat"
.br
.ti -1c
.RI "#define \fBsetmemory\fP   igesetmemory"
.br
.ti -1c
.RI "#define \fBfreememory\fP   igefreememory"
.br
.ti -1c
.RI "#define \fBscan_intervals\fP   igescan_intervals"
.br
.ti -1c
.RI "#define \fBSENDBUFF\fP   0"
.br
.ti -1c
.RI "#define \fBRECVBUFF\fP   1"
.br
.ti -1c
.RI "#define \fBSIZEBUFF\fP   2"
.br
.ti -1c
.RI "#define \fBNDEBUG\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBClacpy\fP ()"
.br
.ti -1c
.RI "void \fBCblacs_pcoord\fP ()"
.br
.ti -1c
.RI "int \fBCblacs_pnum\fP ()"
.br
.ti -1c
.RI "void \fBCsetpvmtids\fP ()"
.br
.ti -1c
.RI "void \fBCblacs_get\fP ()"
.br
.ti -1c
.RI "void \fBCblacs_pinfo\fP ()"
.br
.ti -1c
.RI "void \fBCblacs_gridinfo\fP ()"
.br
.ti -1c
.RI "void \fBCblacs_gridinit\fP ()"
.br
.ti -1c
.RI "void \fBCblacs_exit\fP ()"
.br
.ti -1c
.RI "void \fBCblacs_gridexit\fP ()"
.br
.ti -1c
.RI "void \fBCblacs_setup\fP ()"
.br
.ti -1c
.RI "void \fBCigebs2d\fP ()"
.br
.ti -1c
.RI "void \fBCigebr2d\fP ()"
.br
.ti -1c
.RI "void \fBCigesd2d\fP ()"
.br
.ti -1c
.RI "void \fBCigerv2d\fP ()"
.br
.ti -1c
.RI "void \fBCigsum2d\fP ()"
.br
.ti -1c
.RI "void \fBCigamn2d\fP ()"
.br
.ti -1c
.RI "void \fBCigamx2d\fP ()"
.br
.ti -1c
.RI "void \fBilacpy_\fP ()"
.br
.ti -1c
.RI "int \fBlocalindice\fP ()"
.br
.ti -1c
.RI "void * \fBmr2d_malloc\fP ()"
.br
.ti -1c
.RI "int \fBppcm\fP ()"
.br
.ti -1c
.RI "int \fBlocalsize\fP ()"
.br
.ti -1c
.RI "int \fBmemoryblocksize\fP ()"
.br
.ti -1c
.RI "int \fBchangeorigin\fP ()"
.br
.ti -1c
.RI "void \fBparamcheck\fP ()"
.br
.ti -1c
.RI "void \fBscanD0\fP ()"
.br
.ti -1c
.RI "void \fBdispmat\fP ()"
.br
.ti -1c
.RI "void \fBsetmemory\fP ()"
.br
.ti -1c
.RI "void \fBfreememory\fP ()"
.br
.ti -1c
.RI "int \fBscan_intervals\fP ()"
.br
.ti -1c
.RI "void \fBCpigemr2do\fP ()"
.br
.ti -1c
.RI "void \fBCpigemr2d\fP ()"
.br
.ti -1c
.RI "void * \fBmr2d_malloc\fP (int n)"
.br
.ti -1c
.RI "int \fBpgcd\fP (int a, int b)"
.br
.ti -1c
.RI "int \fBppcm\fP (int a, int b)"
.br
.ti -1c
.RI "int \fBlocalsize\fP (int myprow, int p, int nbrow, int m)"
.br
.ti -1c
.RI "int \fBmemoryblocksize\fP (\fBMDESC\fP *a)"
.br
.ti -1c
.RI "void \fBcheckequal\fP (int ctxt, int a)"
.br
.ti -1c
.RI "void \fBparamcheck\fP (\fBMDESC\fP *a, int i, int j, int m, int n, int p, int q, gcontext)"
.br
.ti -1c
.RI "int \fBchangeorigin\fP (int myp, int sp, int p, int bs, int i, int *decal, int *newsp)"
.br
.ti -1c
.RI "int \fBlocalindice\fP (int ig, int jg, int templateheight, int templatewidth, \fBMDESC\fP *a)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define BLOCK_CYCLIC_2D   1"

.SS "#define Clacpy   Cigelacpy"

.SS "#define dispmat   igedispmat"

.SS "#define DIVUP(a, b)   ( ((a)\-1) /(b)+1)"

.SS "#define fortran_mr2d   pigemr2do"

.SS "#define fortran_mr2dnew   pigemr2d"

.SS "#define freememory   igefreememory"

.SS "#define icopy_   \fBicopy\fP"

.SS "#define ilacpy_   \fBilacpy\fP"

.SS "#define max(A, B)   ((A)>(B)?(A):(B))"

.SS "#define min(A, B)   ((A)>(B)?(B):(A))"

.SS "#define NDEBUG"

.SS "#define RECVBUFF   1"

.SS "#define ROUNDUP(a, b)   (\fBDIVUP\fP(a,b)*(b))"

.SS "#define scan_intervals   igescan_intervals"

.SS "#define scanD0   igescanD0"

.SS "#define SENDBUFF   0"

.SS "#define setmemory   igesetmemory"

.SS "#define SHIFT(row, sprow, nbrow)   ((row)\-(sprow)+ ((row) >= (sprow) ? 0 : (nbrow)))"

.SS "#define SIZEBUFF   2"

.SS "#define static2   static"

.SH "Function Documentation"
.PP 
.SS "void Cblacs_exit ()"

.SS "void Cblacs_get ()"

.SS "void Cblacs_gridexit ()"

.SS "void Cblacs_gridinfo ()"

.SS "void Cblacs_gridinit ()"

.SS "void Cblacs_pcoord ()"

.SS "void Cblacs_pinfo ()"

.SS "int Cblacs_pnum ()"

.SS "void Cblacs_setup ()"

.SS "int changeorigin ()"

.SS "int changeorigin (int myp, int sp, int p, int bs, int i, int  * decal, int * newsp)"

.SS "void checkequal (int ctxt, int a)"

.SS "void Cigamn2d ()"

.SS "void Cigamx2d ()"

.SS "void Cigebr2d ()"

.SS "void Cigebs2d ()"

.SS "void Cigerv2d ()"

.SS "void Cigesd2d ()"

.SS "void Cigsum2d ()"

.SS "void Clacpy ()"

.SS "void Cpigemr2d ()"

.SS "void Cpigemr2do ()"

.SS "void Csetpvmtids ()"

.SS "void dispmat ()"

.SS "void freememory ()"

.SS "void ilacpy_ ()"

.SS "int localindice ()"

.SS "int localindice (int ig, int jg, int templateheight, int templatewidth, \fBMDESC\fP * a)"

.SS "int localsize ()"

.SS "int localsize (int myprow, int p, int nbrow, int m)"

.SS "int memoryblocksize ()"

.SS "int memoryblocksize (\fBMDESC\fP * a)"

.SS "void* mr2d_malloc ()"

.SS "void* mr2d_malloc (int n)"

.SS "void paramcheck ()"

.SS "void paramcheck (\fBMDESC\fP * a, int i, int j, int m, int n, int p, int q, gcontext)"

.SS "int pgcd (int a, int b)"

.SS "int ppcm ()"

.SS "int ppcm (int a, int b)"

.SS "int scan_intervals ()"

.SS "void scanD0 ()"

.SS "void setmemory ()"

.SH "Author"
.PP 
Generated automatically by Doxygen for ScaLAPACK 2\&.1 from the source code\&.
